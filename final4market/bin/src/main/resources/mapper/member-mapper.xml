<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.market.mapper.MemberMapper">

    <resultMap type="com.market.dto.MemberDTO" id="member">
        <id column="member_id" property="memberId" />
        <result column="member_name" property="memberName" />
        <result column="member_passwd" property="memberPasswd" />
        <result column="member_nick" property="memberNick" />
        <result column="member_email" property="memberEmail" />
        <result column="member_address" property="memberAddr" />
        <result column="member_profile_no" property="memberProfileNo" />
        <result column="member_grade" property="memberGrade" />
        <result column="grade_name" property="memberGradeName" />
        <result column="member_phone_number" property="memberPhoneNo" />
        <result column="register_date" property="memberRegDate" />
    </resultMap>
    
    <resultMap type="com.market.dto.StoreDTO" id="store">
		<id column="SELLER_ID" property="sellerId" />
		<result column="BUYER_ID" property="buyerId"/>
		<result column="PRODUCT_NO" property="productNo"/>
		<result column="FOLLOWER_COUNT" property="followerCount"/>
		<result column="SALE_COUNT" property="saleCount"/>
		<result column="SALE_PRICE" property="salePrice"/>
		<result column="REVIEW" property="review"/>
		<result column="SALE_STATUS" property="saleStatus"/>
		<result column="PROFILE_PATH" property="profileNo"/>
		<result column="REVIEW_SCORE" property="reviewScore"/>
	</resultMap>
	
	<resultMap type="com.market.dto.MemberProfileDTO" id="profile">
		<id column="MEMBER_PROFILE_NO" property="memberProfileNo" />
		<result column="MEMBER_PROFILE_PATH" property="memberProfilePath"/>
	</resultMap>

	<resultMap type="com.market.dto.MemberAddressDTO" id="address">
		<id column="MEMBER_ADDRESS_NO" property="memberAddressNo"/>
		<result column="MEMBER_ID" property="memberId"/>
		<result column="ADDRESS_NAME" property="addressName"/>
		<result column="ADDRESS" property="address"/>
		<result column="POSTAL_CODE" property="postalCode"/>
		<result column="MAIN_ADDRESS" property="mainAddress"/>
		<result column="MEMBER_NAME" property="memberName"/>
		<result column="MEMBER_PHONE_NUMBER" property="memberPhoneNumber"/>
	</resultMap>

	<select id="selectAllMembers" resultMap="member">
       SELECT m.member_id, m.member_name, m.member_nick, m.member_email, m.member_address,
       m.member_profile_no, m.member_grade, g.grade_name,
       m.member_phone_number, m.register_date
		FROM member m
		JOIN member_grade g ON m.member_grade = g.member_grade
		WHERE m.member_grade IN (1, 2)
    </select>
    
    <select id="searchMembers" parameterType="map" resultMap="member">
        SELECT m.member_id, m.member_name, m.member_passwd, m.member_nick, m.member_email, m.member_address,
               m.member_profile_no, m.member_grade, g.grade_name, m.member_phone_number, m.register_date
        FROM member m
        JOIN member_grade g ON m.member_grade = g.member_grade
        WHERE m.member_grade IN (1, 2)
        <if test="memberId != null and memberId != ''">
            AND m.member_id LIKE '%' || #{memberId} || '%'
        </if>
        <if test="memberName != null and memberName != ''">
            AND LOWER(m.member_name) LIKE '%' || LOWER(#{memberName}) || '%'
        </if>
        <if test="memberNick != null and memberNick != ''">
            AND LOWER(m.member_nick) LIKE '%' || LOWER(#{memberNick}) || '%'
        </if>
        <if test="memberEmail != null and memberEmail != ''">
            AND m.member_email LIKE '%' || #{memberEmail} || '%'
        </if>
        <if test="memberPhoneNo != null and memberPhoneNo != ''">
            AND m.member_phone_number LIKE '%' || #{memberPhoneNo} || '%'
        </if>
     </select>   
    
     <update id="updateMember" parameterType="com.market.dto.MemberDTO">
            UPDATE member
    		SET 
       			member_name = #{memberName}, 
        		member_nick = #{memberNick},
        		member_email = #{memberEmail}, 
        		member_phone_number = #{memberPhoneNo},
        		member_grade = #{memberGrade}
        		<if test="memberAddr != null and memberAddr != ''">
            		, member_address = #{memberAddr}
        		</if>
        		<if test="memberPasswd != null and memberPasswd != ''">
            		, member_passwd = #{memberPasswd}
        		</if>
    		WHERE member_id = #{memberId}
    </update>
    
    <delete id="deleteMember" parameterType="String">
        DELETE FROM member WHERE member_id=#{memberId}
    </delete>
    <select id="storeInfo" resultMap="store" parameterType="String">
	SELECT P.PRODUCT_NO,
       P.MEMBER_ID AS SELLER_ID,
       r.BUYER_ID,
       P.PRODUCT_PRICE AS SALE_PRICE,
       P.PRODUCT_SALE AS SALE_STATUS,
       (SELECT COUNT(*) FROM PRODUCT p2 WHERE P2.MEMBER_ID = #{memberId}) AS SALE_COUNT,
       (SELECT COUNT(*) FROM follow f WHERE F.SELLER_ID = #{memberId}) AS FOLLOWER_COUNT,
       r.REVIEW	,
       r.REVIEW_SCORE
	   FROM PRODUCT p
	   LEFT JOIN REVIEW r ON r.PRODUCT_NO = P.PRODUCT_NO
	   WHERE P.MEMBER_ID = #{memberId}
	</select>
	
	<select id="profileNo" parameterType="String">
		SELECT m.MEMBER_PROFILE_NO  FROM "MEMBER" M WHERE M.MEMBER_ID = #{memberId}
	</select>
	
	<select id="profilePath" parameterType="int">
		SELECT MP.PROFILE_PATH  FROM MEMBER_PROFILE mp WHERE MP.MEMBER_PROFILE_NO = #{profileNo}
	</select>
	
	<select id="buyerProfileNo" parameterType="list" resultType="string">
	    SELECT m.MEMBER_PROFILE_NO 
	    FROM MEMBER M 
	    WHERE M.MEMBER_ID IN 
	    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
	        #{item}
	    </foreach>
	</select>

	<select id="buyerProfilePath" parameterType="list" resultType="map">
	    SELECT M.MEMBER_ID AS memberId, MP.PROFILE_PATH AS profilePath 
	    FROM MEMBER_PROFILE MP
	    JOIN MEMBER M ON MP.MEMBER_PROFILE_NO = M.MEMBER_PROFILE_NO
	    WHERE MP.MEMBER_PROFILE_NO IN 
	    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
	        #{item}
	    </foreach>
	</select>

    <select id="selectMemberProfile" parameterType="int" resultType="map">
        SELECT PROFILE_PATH FROM MEMBER_PROFILE WHERE MEMBER_PROFILE_NO = #{MEMBER_PROFILE_NO}
    </select>

	<select id="selectMemberNick" parameterType="String" resultType="map">
		SELECT MEMBER_NICK FROM MEMBER WHERE MEMBER_ID = #{MEMBER_ID}
	</select>

	<select id="selectMemberScore" parameterType="String" resultType="map">
		SELECT REVIEW_SCORE FROM REVIEW WHERE SELLER_ID = #{MEMBER_ID}
	</select>
	
	<insert id="insertFollow" parameterType="map">
		insert into follow values(#{buyerId},#{sellerId})
	</insert>
	
	<delete id="deleteFollow" parameterType="map">
		delete from follow where buyer_id = #{buyerId} and seller_id = #{sellerId}
	</delete>
	
	<select id="selectMemberAddress" parameterType="String" resultMap="address">
		select * from member_delivery_address where member_id = #{memberId} 
	</select>
	
	<select id="currentAddressNO" resultType="int">
		SELECT ADDRESS_NO.NEXTVAL FROM DUAL
	</select>

	<insert id="insertMemberAddress" parameterType="com.market.dto.MemberAddressDTO">
		insert into member_delivery_address values(#{memberAddressNo},#{memberId},#{address},#{postalCode},#{mainAddress},#{memberName},#{memberPhoneNumber},#{addressName})
	</insert>
	
	<delete id="deleteMemberAddress" parameterType="int">
		delete from member_delivery_address where member_address_no = #{memberAddressNo}
	</delete>
	
	<update id="changeMainAddressExisting" parameterType="address">
		update member_delivery_address set main_address = 0 where member_id = #{memberId} and main_address = 1
	</update>
	
	<update id="changeMainAddressNew" parameterType="address">
		update member_delivery_address set main_address = 1 where member_id = #{memberId} and member_address_no = #{memberAddressNo}	
 	</update>
 	
 	<select id="selectFollowStatus" parameterType="String">
		select buyer_id from follow where seller_id = #{memberId}
	</select>
</mapper>
